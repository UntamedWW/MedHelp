// <auto-generated />
using System;
using Medhelp.PersistenceLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medhelp.PersistenceLayer.Migrations
{
    [DbContext(typeof(MedhelpContext))]
    [Migration("20250524203621_BaseMedicalInfo")]
    partial class BaseMedicalInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActiveSubstanceMedicine", b =>
                {
                    b.Property<Guid>("ActiveSubstancesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ActiveSubstancesId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicineActiveSubstances", (string)null);
                });

            modelBuilder.Entity("DrugActionMedicine", b =>
                {
                    b.Property<Guid>("DrugActionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("DrugActionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicineDrugActions", (string)null);
                });

            modelBuilder.Entity("DrugFormMedicine", b =>
                {
                    b.Property<Guid>("DrugFormsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("DrugFormsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicineDrugForms", (string)null);
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.ActiveSubstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ActiveSubstances");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.DiseaseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DiseaseGroups");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.DrugAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DrugActions");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.DrugForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DrugForms");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LaunchYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Medhelp.Domain.Entities.OrganSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganSystems");
                });

            modelBuilder.Entity("MedicalSpecialtyMedicine", b =>
                {
                    b.Property<Guid>("MedicalSpecialtiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("MedicalSpecialtiesId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicineMedicalSpecialties", (string)null);
                });

            modelBuilder.Entity("MedicineOrganSystem", b =>
                {
                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganSystemsId")
                        .HasColumnType("uuid");

                    b.HasKey("MedicinesId", "OrganSystemsId");

                    b.HasIndex("OrganSystemsId");

                    b.ToTable("MedicineOrganSystems", (string)null);
                });

            modelBuilder.Entity("ActiveSubstanceMedicine", b =>
                {
                    b.HasOne("Medhelp.Domain.Entities.ActiveSubstance", null)
                        .WithMany()
                        .HasForeignKey("ActiveSubstancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medhelp.Domain.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugActionMedicine", b =>
                {
                    b.HasOne("Medhelp.Domain.Entities.DrugAction", null)
                        .WithMany()
                        .HasForeignKey("DrugActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medhelp.Domain.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugFormMedicine", b =>
                {
                    b.HasOne("Medhelp.Domain.Entities.DrugForm", null)
                        .WithMany()
                        .HasForeignKey("DrugFormsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medhelp.Domain.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalSpecialtyMedicine", b =>
                {
                    b.HasOne("Medhelp.Domain.Entities.MedicalSpecialty", null)
                        .WithMany()
                        .HasForeignKey("MedicalSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medhelp.Domain.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicineOrganSystem", b =>
                {
                    b.HasOne("Medhelp.Domain.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medhelp.Domain.Entities.OrganSystem", null)
                        .WithMany()
                        .HasForeignKey("OrganSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
